"""添加开发者相关字段到Tool模型

迁移版本: 001
创建时间: 2024-01-01
描述: 为Tool模型添加开发者相关字段，包括developer_id、is_public、status、version、tags、download_count、rating等
"""

import sqlite3
import sys
import os
from pathlib import Path

# 添加项目根目录到Python路径
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.config import settings

# 迁移版本标识
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    """升级数据库结构"""
    print("开始执行数据库迁移...")
    
    # 获取数据库连接 - 强制使用本地SQLite
    db_path = "/home/devbox/project/backend/ai_assistant.db"
    
    print(f"连接数据库: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 检查tools表是否存在
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='tools'")
        if not cursor.fetchone():
            print("tools表不存在，创建基础表结构...")
            # 创建基础的tools表
            create_table_sql = """
            CREATE TABLE tools (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                server_name VARCHAR(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """
            cursor.execute(create_table_sql)
            print("✓ 创建了基础tools表")
            
            # 检查users表是否存在，如果不存在也创建
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
            if not cursor.fetchone():
                print("users表不存在，创建基础表结构...")
                create_users_sql = """
                CREATE TABLE users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email VARCHAR(255) UNIQUE NOT NULL,
                    full_name VARCHAR(255),
                    hashed_password VARCHAR(255),
                    role VARCHAR(50) DEFAULT 'user',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """
                cursor.execute(create_users_sql)
                print("✓ 创建了基础users表")
            
        print("检查现有字段...")
        cursor.execute("PRAGMA table_info(tools)")
        existing_columns = [row[1] for row in cursor.fetchall()]
        print(f"现有字段: {existing_columns}")
        
        # 要添加的字段列表
        fields_to_add = [
            ('developer_id', 'INTEGER'),
            ('is_public', 'BOOLEAN DEFAULT 1'),
            ('status', 'VARCHAR(20) DEFAULT "draft"'),
            ('version', 'VARCHAR(20) DEFAULT "1.0.0"'),
            ('tags', 'TEXT'),  # SQLite中使用TEXT存储JSON
            ('download_count', 'INTEGER DEFAULT 0'),
            ('rating', 'REAL')
        ]
        
        # 逐个添加字段
        for field_name, field_type in fields_to_add:
            if field_name not in existing_columns:
                sql = f"ALTER TABLE tools ADD COLUMN {field_name} {field_type}"
                print(f"执行: {sql}")
                cursor.execute(sql)
                print(f"✓ 成功添加字段: {field_name}")
            else:
                print(f"○ 字段已存在: {field_name}")
        
        # 提交更改
        conn.commit()
        print("✓ 所有字段添加完成")
        
        # 验证结果
        cursor.execute("PRAGMA table_info(tools)")
        final_columns = [row[1] for row in cursor.fetchall()]
        print(f"最终字段列表: {final_columns}")
        
        conn.close()
        print("✓ 数据库迁移完成")
        return True
        
    except Exception as e:
        print(f"错误: {e}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return False


def downgrade():
    """降级数据库结构"""
    print("开始执行数据库回滚...")
    
    # 获取数据库连接 - 强制使用本地SQLite
    db_path = "/home/devbox/project/backend/ai_assistant.db"
    
    print(f"连接数据库: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # SQLite不支持直接删除列，需要重建表
        print("注意: SQLite不支持直接删除列，需要重建表")
        
        # 获取原始表结构（不包含要删除的字段）
        cursor.execute("PRAGMA table_info(tools)")
        all_columns = cursor.fetchall()
        
        # 要保留的字段（排除开发者相关字段）
        fields_to_remove = ['developer_id', 'is_public', 'status', 'version', 'tags', 'download_count', 'rating']
        keep_columns = [col for col in all_columns if col[1] not in fields_to_remove]
        
        if len(keep_columns) == len(all_columns):
            print("没有需要删除的字段")
            return True
            
        print(f"将保留 {len(keep_columns)} 个字段，删除 {len(all_columns) - len(keep_columns)} 个字段")
        
        # 这里只是提示，实际的表重建比较复杂，暂时跳过
        print("回滚操作需要重建表，暂时跳过")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"错误: {e}")
        if 'conn' in locals():
            conn.close()
        return False


def get_migration_info():
    """获取迁移信息"""
    return {
        'revision': revision,
        'description': '添加开发者相关字段到Tool模型',
        'tables_affected': ['tools'],
        'operations': [
            'ADD COLUMN developer_id',
            'ADD COLUMN is_public',
            'ADD COLUMN status',
            'ADD COLUMN version',
            'ADD COLUMN tags',
            'ADD COLUMN download_count',
            'ADD COLUMN rating',
            'CREATE FOREIGN KEY fk_tools_developer_id',
            'CREATE INDEX idx_tools_developer_id',
            'CREATE INDEX idx_tools_status',
            'CREATE INDEX idx_tools_is_public',
            'CREATE INDEX idx_tools_download_count',
            'CREATE INDEX idx_tools_rating'
        ]
    }


if __name__ == '__main__':
    """直接运行此脚本时执行迁移"""
    print("=== 数据库迁移脚本 ===")
    print("迁移脚本信息:")
    info = get_migration_info()
    for key, value in info.items():
        print(f"  {key}: {value}")
    
    print("\n开始执行迁移...")
    success = upgrade()
    
    if success:
        print("\n✓ 迁移执行成功！")
        sys.exit(0)
    else:
        print("\n✗ 迁移执行失败！")
        sys.exit(1)